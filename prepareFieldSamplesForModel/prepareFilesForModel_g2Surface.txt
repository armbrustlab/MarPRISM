###g2 surface

#concatenate all of the pfam annotations for the g2 polyA metaT contigs
egthomas@grazer:/mnt/nfs/projects/ryan/Gradients2/PA/assemblies/raw/Pfam34$ for f in *domtblout.tab; do (cat "${f}"; echo) >> ~/prepareG2DCMReads/G2_surface/G2_surface_pfamAnnotations; done

R

#loads the concatenated pfam results for the g2 polyA metaT contigs
> res <- read.table("../g2DCM/G2_surface/G2_surface_pfamAnnotations")

> str(res$V8)
 num [1:27728680] 56.6 53.9 53.5 53.2 52.7 52.7 52.6 52.6 52.6 52.5 ...

> str(res$V7)
 num [1:27728680] 3.7e-13 2.6e-12 3.3e-12 4.4e-12 6.0e-12 ...
 
#get only pfam annotations with 3 value of 10^-5
> res <- res %>% filter(V7 < 10^(-5))

> #for contig reading frame, get the pfam with the highest score
> best_pfam_dat <- res %>% group_by(V1) %>% slice(which.max(V8))

> best_pfam_dat %>% write_csv("../g2DCM/G2_surface/G2_surface_pfamAnnotations_bestPfam.tab")

egthomas@grazer:/mnt/nfs/projects/armbrust-metat/gradients2/g2_station_pa_metat/assemblies/annotations/joined$ cp G2PA.contig_dat_all.csv.gz ~/g2/

R

#load number of transcripts mapped to each contig for g2 poly A samples
> g2 <- read_csv("G2PA.contig_dat_all.csv")

#loads taxa annotations for contigs, made using marferret and marmicrodb
> tax <- read.table("NPac.G2PA.MarFERReT_v1.1_MMDB.lca.tab")

> str(tax$V2)
 int [1:49691936] 2864 0 2969 1735743 0 0 2864 0 407301 0 ...

#get rid of rows without taxa annotations
> tax_noNA <- tax %>% filter(V2 != 0)
> tax_noNA <- tax_noNA %>% filter(!is.na(V2))

#make variable for nucleotide id
> tax_noNA <- tax_noNA %>% mutate(nt_id = str_replace(V1, "_[0-9]{1,}$", ""))

> str(tax_noNA$V3)
 num [1:27618915] 1.42e-39 1.30e-38 3.90e-46 1.11e-11 2.97e-25 ...

#get best taxa annotation for each nucleotide id
> tax_best <- tax_noNA %>% group_by(nt_id) %>% arrange(V3) %>% slice(1)

> tax_best %>% write_csv("~/g2/NPac.G2PA.MarFERReT_MarMicroDB.lca_bestAnnotation_fall2023.csv")

> tax_best <- read_csv("~/g2/NPac.G2PA.MarFERReT_MarMicroDB.lca_bestAnnotation_fall2023.csv")

#get rid of unnecessary variables
> g2 <- g2 %>% select(-c(dmnd_eval, pfam_score, tax_id, pfam))

#add taxa annotations of contigs to the number of reads mapped to contig per sample
> nrow(g2)
[1] 44353029
> g2_tax <- g2 %>% left_join(tax_best, by = c("nt_id"))
> nrow(g2_tax)
[1] 44353029

> str(g2_tax$V2)
 num [1:44353029] NA 412157 NA NA 34765 ...
 
#get rid of contigs without taxa annotations
> g2_tax <- g2_tax %>% filter(!is.na(V2))

#gather into long form
> g2_gather <- g2_tax %>% gather(`G2PA.S11C1.15m.0_2um.C`:`G2PA.S06C1.15m.0_2um.A`, key = "var", value = "value")

#ungroup dataframe
> g2_tax <- g2_gather %>% ungroup()

> str(g2_tax$value)
 num [1:1536546381] 0 0 0 0 0 0 0 0 0 0 ...

#gets rid of rows for contigs that have 0 transcripts mapped to them in the sample
> g2_tax <- g2_tax %>% filter(value > 0)

#loads best pfam annotation for each contig reading frame
> pfam <- read_csv("~/g2DCM/G2_surface/G2_surface_pfamAnnotations_bestPfam.tab")

#make variable for the nucleotide id 
> pfam <- pfam %>% mutate(nt_id = str_replace(V1, "_[0-9]{1,}$", ""))

#there are more pfam annotations than nucleotide ids
> pfam %>% nrow()
[1] 15241470
> pfam %>% distinct(nt_id) %>% nrow()
[1] 15124459

#gets amino acid id (longest reading frame) per nucleotide id 
> aa_nt_pfam <- read_csv("/mnt/nfs/projects/ryan/NPacAssemblies_2021/joined/G2PA.best_pfam.csv") %>% distinct(aa_id, nt_id, knum)

#gets only the pfam annotation for the longest amino acid sequence for each 
#nucleotide id
> pfam_select <- pfam %>% semi_join(aa_nt_pfam, by = c("V1" = "aa_id"))

#gets rid of unnecessary variables
> pfam_select <- pfam_select %>% select(V1, V4, V5, nt_id)

#now there is only one pfam annotation for nucleotide id
> pfam_select %>% distinct(V1) %>% nrow()
[1] 15124457
> pfam_select %>% distinct(nt_id) %>% nrow()
[1] 15124457

#adds best pfam annotation to each nucleotide id in counts dataframe
> nrow(g2_tax)
[1] 162454544
> g2_gather_merged <- g2_tax %>% left_join(pfam_select %>% select(-V1), by = c("nt_id"))
> nrow(g2_gather_merged)
[1] 162454544

#write data with number of mapped reads per contig per sample, with the contig's 
#pfam and taxa annotation to csv file
> g2_gather_merged %>% write_csv("~/g2/G2_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_fall2023.csv")

##calculate tpm
> g2_gather_merged <- g2_gather_merged %>% mutate(length_kb = length/1000)

> g2_gather_merged <- g2_gather_merged %>% mutate(est_counts_div_length_kb = value/length_kb)

> mCounts <- g2_gather_merged %>% group_by(var, V2) %>% summarize(mCount = sum(est_counts_div_length_kb)/1e6)
`summarise()` has grouped output by 'var'. You can override using the `.groups` argument.

> mCounts <- mCounts %>% ungroup()

> nrow(g2_gather_merged)
[1] 162454544
> g2_gather_merged <- g2_gather_merged %>% left_join(mCounts, by = c("var", "V2"))
> nrow(g2_gather_merged)
[1] 162454544

> g2_gather_merged <- g2_gather_merged %>% mutate(tpm = est_counts_div_length_kb/mCount)

> g2_gather_merged %>% write_csv("~/g2/G2_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_fall2023.csv")

#after calculating tpm, get rid of contigs without pfam annotations
> g2_gather_merged <- g2_gather_merged %>% filter(!is.na(V5))

> g2_gather_merged %>% write_csv("~/g2/G2_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_noNAPfam_fall2023.csv")

> g2_gather_merged <- read_csv("~/g2/G2_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_noNAPfam_fall2023.csv")

#make variable for pfam without digits after decimal
> g2_gather_merged <- g2_gather_merged %>% mutate(pfam = str_replace(V5, "\\..*", ""))

#loads taxa names corresponding to taxa ids in marferret
> name <- read_csv("/mnt/nfs/projects/marferret/v1/data/MarFERReT.v1.taxa.csv")

#get rid of unnecessary variables
> name <- name %>% select(1:4)

#rename taxa id variable
> colnames(g2_gather_merged)[4] <- "tax_id"

#add taxa names to counts dataframe
> nrow(g2_gather_merged)
[1] 69756838
> g2_gather_merged_name <- g2_gather_merged %>% left_join(name, by = c("tax_id"))
> nrow(g2_gather_merged_name)
[1] 69756838

#get rid of contigs without taxa annotations
> g2_gather_merged_name_noMissingTaxa <- g2_gather_merged_name %>% filter(!is.na(tax_name))

#load core transcribed genes (CTGS) identified 
#from 10.1038/s41597-023-02842-4
> core <- read_csv("~/MarFERReT.v1.core_genes.csv")

#get just ctgs grouped at level of eukaryotes
> core <- core %>% filter(lineage == "Eukaryota")

#make a dataframe to count the number of ctgs in each species bin by sample
> pfamSummary <- g2_gather_merged_name_noMissingTaxa %>% semi_join(core, by = c("V5" = "pfam_id"))

#calculate number of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% group_by(var, tax_id, tax_name) %>% distinct(V5) %>% summarize(numCorePfams = n())
`summarise()` has grouped output by 'var', 'tax_id'. You can override using the `.groups` argument.

#there are a total of 605 eukaryote ctgs
#calculate proportion of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% ungroup() %>% mutate(propCorePfams = numCorePfams/605)

> pfamSummary %>% write_csv("~/g2/pfamSummary.csv")

#get species bins/samples that have at least 70% of ctgs detected
> pfamSummary <- pfamSummary %>% filter(propCorePfams >= .7)

#gets just the counts for taxa and sample pairs that have at least 70% of ctgs detected
> g2_gather_merged_name_noMissingTaxa <- g2_gather_merged_name_noMissingTaxa %>% semi_join(pfamSummary, by = c("tax_id", "var"))

#for each taxa, sample, and pfam combination, get total tpm
> g2_summary <- g2_gather_merged_name_noMissingTaxa %>% ungroup() %>% dplyr::group_by(var, tax_id, tax_name, V5) %>% dplyr::summarize(tpm = sum(tpm))
`summarise()` has grouped output by 'var', 'tax_id', 'tax_name'. You can override using the `.groups` argument.

#ungroup counts summary data
> g2_summary <- g2_summary %>% ungroup()

#name pfam variable
> colnames(g2_summary)[4] <- "pfam"

#make variable for pfam without digits after decimal  
> g2_summary <- g2_summary %>% mutate(shortPfam = str_replace(pfam, "\\..{1,}$", ""))

#name sample variable
> colnames(g2_summary)[1] <- "sample_id"

#get rid of unnecessary variables
> g2_summary_spread <- g2_summary %>% select(sample_id, tax_name, shortPfam, tpm)

#fill in pfams missing with 0 counts
> g2_summary_spread <- g2_summary_spread %>% spread(key = shortPfam, value = tpm, fill = 0)

#loads feature pfams
> pfam <- read_csv("~/Extracted_Pfams_noOutliers_newContaminationMetric_xg.csv")

> merg <- g2_summary_spread

> merg <- merg %>% gather(3:6747, key = "pfam", value = "tpm")

#get missing pfams
> miss <- pfam %>% anti_join(merg, by = c("pfam"))

#fill in missing pfams with 0 counts
> miss <- miss %>% mutate(sample_id = "G2PA.S02C1.15m.0_2um.A", tax_name = "Dinophyceae")

> merg <- merg %>% bind_rows(miss)

#fill in missing pfams with 0
> merg <- merg %>% spread(key = pfam, value = tpm, fill = 0)

> merg %>% write_csv("~/g2/G2_surface_tpm_updatedMarferret_marmicroDb2023_sampleTaxa_noOutliers_fixedTPM_fall2023_allPfams.csv")

#gather into long form
> merg <- merg %>% gather(3:6749, key = "pfam", value = "TPM")

> merg <- merg %>% semi_join(pfam, by = c("pfam"))

#spread data again
> merg <- merg %>% spread(key = pfam, value = TPM, fill = 0)

#gets just taxa with spaces in name because I only want species bins
> merg <- merg %>% filter(str_detect(tax_name, " "))

> merg %>% select(sample_id:tax_name) %>% write_csv("~/g2/G2_surface_tpm_updatedMarferret_marmicroDb2023_sampleTaxa_noOutliers_fixedTPM_fall2023.csv")
> merg %>% select(-c(sample_id:tax_name)) %>% write_csv("~/g2/G2_surface_tpm_updatedMarferret_marmicroDb2023_noOutliers_fixedTPM_fall2023.csv")














