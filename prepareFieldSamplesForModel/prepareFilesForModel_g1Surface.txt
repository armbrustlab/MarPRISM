###g1 surface

egthomas@grazer:/mnt/nfs/projects/armbrust-metat/gradients1/g1_station_pa_metat/assemblies/annotations/joined$ cp G1PA.contig_dat_all.csv.gz ~/g1/

R

#reads in g1 polyA metaT number of transcripts mapped to each contig 
> g1 <- read_csv("G1PA.contig_dat_all.csv")

#get rid of unnecessary variables
> g1 <- g1 %>% select(-c(dmnd_eval, pfam_score, tax_id, pfam))

#gather into long format
> g1_gather <- g1 %>% gather(S02C1_0.2umA:S14C1_3umC, key = "var", value = "value")

> str(g1_gather)
tibble [1,499,566,819 × 4] (S3: tbl_df/tbl/data.frame)
 $ nt_id : chr [1:1499566819] "G1PA_S02C1_0_2um_TRINITY_DN80_c0_g1_i1" "G1PA_S02C1_0_2um_TRINITY_DN78_c0_g1_i1" "G1PA_S02C1_0_2um_TRINITY_DN86_c0_g1_i1" "G1PA_S02C1_0_2um_TRINITY_DN8_c0_g1_i1" ...
 $ length: num [1:1499566819] 304 334 351 340 405 331 486 310 316 343 ...
 $ var   : chr [1:1499566819] "S02C1_0.2umA" "S02C1_0.2umA" "S02C1_0.2umA" "S02C1_0.2umA" ...
 $ value : num [1:1499566819] 4 0 1 0 10 3 0 7 0 0 ...

#get rid of contigs that have 0 reads mapped
> g1_gather <- g1_gather %>% filter(value > 0)

> g1_gather %>% write_csv("~/g1/G1PA.contig_dat_all_noZeroes_fall2023.csv")

#load taxa annotation file that was produced using marferret and marmicrodb
> tax <- read.table("NPac.G1PA.MarFERReT_v1.1_MMDB.lca.tab")

> str(tax$V2)
 int [1:37950644] 0 0 2759 2864 40984 156230 0 0 0 0 ...

#gets rid of contigs without taxa annotation
#0 for tax id means no taxa annotation
> tax_noNA <- tax %>% filter(V2 != 0)

#make variable for nucleotide id
> tax_noNA <- tax_noNA %>% mutate(nt_id = str_replace(V1, "_[0-9]{1,}$", ""))

#get rid of contigs without taxa annotation
> tax_noNA <- tax_noNA %>% filter(!is.na(V2))

> str(tax$V3)
 num [1:21091993] 1.6e-36 3.1e-20 5.1e-17 2.2e-26 2.1e-35 ...

#get best taxa annotation for each nucleotide id
> tax_best <- tax_noNA %>% group_by(nt_id) %>% arrange(V3) %>% slice(1)

> tax_best %>% write_csv("~/g1/NPac.G1PA.MarFERReT_MarMicroDB.lca_bestAnnotation_fall2023.csv")

> tax_best <- read_csv("~/g1/NPac.G1PA.MarFERReT_MarMicroDB.lca_bestAnnotation_fall2023.csv")

#add taxa annotations to number of reads mapped to each contig
> nrow(g1_gather)
[1] 176154876
> g1_tax <- g1_gather %>% left_join(tax_best %>% distinct(nt_id, V2), by = c("nt_id"))
> nrow(g1_tax)
[1] 176154876

> g1_tax %>% write_csv("~/g1/G1PA.contig_dat_all_noZeroes_withTaxa_fall2023.csv")

#get rid of contigs without taxa annotations
> g1_tax <- g1_tax %>% filter(!is.na(V2))


#concatenate all of the pfam results for the g1 polyA metaT contigs
egthomas@grazer:~$ for f in /mnt/nfs/projects/ryan/Gradients1/assemblies/6tr/Pfam34/*domtblout.tab; do (cat "${f}"; echo) >> ~/G1_surface_pfamAnnotations; done

#loads the concatenated pfam results for the g1 polyA metaT contigs
> res <- read.table("~/g1/G1_surface_pfamAnnotations")

> str(res$V8)
 num [1:21558582] 67.2 67.2 59.6 59.6 58.9 58.7 58.7 58.3 56.3 55 ...
 
> str(res$V7)
 num [1:21558582] 4.5e-16 4.5e-16 1.1e-13 1.1e-13 1.8e-13 ...

#get only pfam annotations that evalue of 10^-5
> res <- res %>% filter(V7 < 10^(-5))

> #for each contig reading frame, get the pfam with the highest score
> best_pfam_dat <- res %>% group_by(V1) %>% slice(which.max(V8))

> best_pfam_dat %>% write_csv("~/G1_surface_pfamAnnotations_bestPfam.tab")

egthomas@grazer:~$ mv G1_surface_pfamAnnotations_bestPfam.tab g1/

#loads best pfam per contig reading frame
> best_pfam_dat <- read_csv("~/g1/G1_surface_pfamAnnotations_bestPfam.tab")

#make variable for nucleotide id 
> pfam <- best_pfam_dat %>% mutate(nt_id = str_replace(V1, "_[0-9]{1,}$", ""))

#gets amino acid id per nucleotide id 
> aa_nt_pfam <- read_csv("/mnt/nfs/projects/ryan/NPacAssemblies_2021/joined/G1PA.best_pfam.csv") %>% distinct(aa_id, nt_id, knum)

#gets only the pfam annotation for the longest amino acid sequence for each 
#nucleotide id
> pfam_select <- pfam %>% semi_join(aa_nt_pfam, by = c("V1" = "aa_id"))

#gets rid of unnecessary variables
> pfam_select <- pfam_select %>% select(V1, V4, V5, nt_id)

#adds best pfam annotation to each nucleotide id in counts dataframe
> nrow(g1_tax)
[1] 107812412
> g1_gather_merged <- g1_tax %>% left_join(pfam_select %>% select(-V1), by = c("nt_id"))
> nrow(g1_gather_merged)
[1] 107812412

> g1_gather_merged %>% write_csv("~/g1/G1_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_fall2023.csv")

##calculate transcripts per million
> g1_gather_merged <- g1_gather_merged %>% mutate(length_kb = length/1000)

> g1_gather_merged <- g1_gather_merged %>% mutate(est_counts_div_length_kb = value/length_kb)

> mCounts <- g1_gather_merged %>% group_by(var, V2) %>% summarize(mCount = sum(est_counts_div_length_kb)/1e6)
`summarise()` has grouped output by 'var'. You can override using the `.groups` argument.

> mCounts <- mCounts %>% ungroup()

> nrow(g1_gather_merged)
[1] 107812412
> g1_gather_merged <- g1_gather_merged %>% left_join(mCounts, by = c("var", "V2"))
> nrow(g1_gather_merged)
[1] 107812412

> g1_gather_merged <- g1_gather_merged %>% mutate(tpm = est_counts_div_length_kb/mCount)

> g1_gather_merged %>% write_csv("~/g1/G1_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_fall2023.csv")

#after calculating tpm, get rid of contigs without pfam annotation
> g1_gather_merged <- g1_gather_merged %>% filter(!is.na(V5))

> g1_gather_merged %>% write_csv("~/g1/G1_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_noNAPfam_fall2023.csv")

> g1_gather_merged <- read_csv("~/g1/G1_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_noNAPfam_fall2023.csv")

#make variable for pfam id without digits after decimal
> g1_gather_merged <- g1_gather_merged %>% mutate(pfam = str_replace(V5, "\\..{1,}$", ""))

#load taxa name that corresponds to each taxa id in marferret
> name <- read_csv("/mnt/nfs/projects/marferret/v1/data/MarFERReT.v1.taxa.csv")

> name <- name %>% select(1:4)

#rename taxa id variable
> colnames(g1_gather_merged)[5] <- "tax_id"

#adds taxa names to counts dataframe
> nrow(g1_gather_merged)
[1] 57416444
> g1_gather_merged_name <- g1_gather_merged %>% left_join(name, by = c("tax_id"))
> nrow(g1_gather_merged_name)
[1] 57416444

#get rid of contigs without taxa annotations
> g1_gather_merged_name_noMissingTaxa <- g1_gather_merged_name %>% filter(!is.na(tax_name))

#require that taxa names have a space in them because I only want annotations at species level
> dat <- g1_gather_merged_name_noMissingTaxa %>% filter(str_detect(tax_name, " "))

#get total tpm per sample, taxa, pfam
> dat <- dat %>% dplyr::group_by(var, tax_id, tax_name, V5) %>% dplyr::summarize(tpm = sum(tpm))
`summarise()` has grouped output by 'var', 'tax_id', 'tax_name'. You can override using the `.groups` argument.

#makes variable for pfam without digits after decimal
> dat <- dat %>% mutate(shortPfam = str_replace(V5, "\\..{1,}$", ""))

#fill in missing pfams with 0
> dat <- dat %>% ungroup() %>% select(-tax_id, -V5) %>% spread(key = shortPfam, value = tpm, fill = 0)

> dat %>% write_csv("~/g1/G1_surface_allSamples_processed_updatedMarferret_marmicroDb2023_noOutliers_tpm_noNAPfam_fall2023_noNATaxa.csv")

#load core transcribed genes (CTGS) identified 
#from 10.1038/s41597-023-02842-4
> core <- read_csv("~/MarFERReT.v1.core_genes.csv")

#get just ctgs grouped at level of eukaryotes
> core <- core %>% filter(lineage == "Eukaryota")

#make a dataframe to count the number of ctgs in each species bin by sample
> pfamSummary <- g1_gather_merged_name_noMissingTaxa %>% semi_join(core, by = c("V5" = "pfam_id"))

#calculate number of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% group_by(var, tax_id, tax_name) %>% distinct(V5) %>% summarize(numCorePfams = n())
`summarise()` has grouped output by 'var', 'tax_id'. You can override using the `.groups` argument.

#there are a total of 605 eukaryote ctgs
> core %>% distinct(pfam_id) %>% summarize(n = n())
# A tibble: 1 × 1
      n
  <int>
1   605

#calculate proportion of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% ungroup() %>% mutate(propCorePfams = numCorePfams/605)

> pfamSummary %>% write_csv("~/g1/corePfamSummary.csv")

#get species bins/samples that have at least 70% of ctgs detected
> pfamSummary <- pfamSummary %>% filter(propCorePfams >= .7)

#gets just the counts for taxa and sample pairs that have at least 70% CTGs expressed
> g1_gather_merged_name_noMissingTaxa <- g1_gather_merged_name_noMissingTaxa %>% semi_join(pfamSummary, by = c("tax_id", "var"))

#for each taxa, sample, and pfam combination, get the total tpm
> g1_summary <- g1_gather_merged_name_noMissingTaxa %>% ungroup() %>% dplyr::group_by(var, tax_id, tax_name, V5) %>% dplyr::summarize(tpm = sum(tpm))
`summarise()` has grouped output by 'var', 'tax_id', 'tax_name'. You can override using the `.groups` argument.

#ungroup counts summary data
> g1_summary <- g1_summary %>% ungroup()

#name pfam variable
> colnames(g1_summary)[4] <- "pfam"
  
#make variable for pfam annotation without digits after decimal
> g1_summary <- g1_summary %>% mutate(shortPfam = str_replace(pfam, "\\..{1,}$", ""))

#name sample variable
> colnames(g1_summary)[1] <- "sample_id"

#gert rid of unnecessary variables
> g1_summary_spread <- g1_summary %>% select(sample_id, tax_name, shortPfam, tpm)

#fill in missing feature pfams with 0
> g1_summary_spread <- g1_summary_spread %>% spread(key = shortPfam, value = tpm, fill = 0)

#loads feature pfams
> pfam <- read_csv("~/Extracted_Pfams_noOutliers_newContaminationMetric_xg.csv")

> merg <- g1_summary_spread

#gather data into long form
> merg <- merg %>% gather(3:7795, key = "pfam", value = "tpm")

#get feature pfams that are not present in data
> miss <- pfam %>% anti_join(merg, by = c("pfam"))

#add feature pfams missing to data, giving them 0 counts
> miss <- miss %>% mutate(sample_id = "S02C1_0.2umA", tax_name = "Calanidae")

> merg <- merg %>% bind_rows(miss)

#spread data into format for model
> merg <- merg %>% spread(key = pfam, value = tpm, fill = 0)

> merg %>% select(sample_id:tax_name) %>% write_csv("~/g1/G1_surface_tpm_updatedMarferret_marmicroDb2023_sampleTaxa_noOutliers_fixedTPM_fall2023.csv")
> merg %>% select(-c(sample_id:tax_name)) %>% write_csv("~/g1/G1_surface_tpm_updatedMarferret_marmicroDb2023_noOutliers_fixedTPM_fall2023.csv")






