###g2 incubations 

#make list of samples
egthomas@grazer:/mnt/nfs/projects/armbrust-metat/gradients2/g2_dcm_rr_pa_metat/paired_end$ ls *MS*.1* > ~/g2Incubations/samples
egthomas@grazer:~/g2Incubations$ sed 's/.1.paired.trim.fastq.gz//g' samples > samplesEdited

egthomas@grazer:/scratch/elaina/g2Inc$ cp /mnt/nfs/projects/armbrust-metat/gradients2/g2_station_pa_metat/assemblies/clustered/NPac.G2PA.bf100.id99.nt.fasta.gz .

#index g2 surface assemblies before mapping
#this is what I am mapping g2 incubation reads against
egthomas@grazer:/scratch/elaina/g2Inc$ kallisto index -i NPac.G2PA.bf100.id99.nt.idx NPac.G2PA.bf100.id99.nt.fasta

#make function for running kallisto alignment
function run_kallisto {

#create output directory for this sample
mkdir ${SAMPLE}

#declare paths and filenames of short reads
LEFT_READS="/mnt/nfs/projects/armbrust-metat/gradients2/g2_dcm_rr_pa_metat/paired_end/${SAMPLE}.1.paired.trim.fastq.gz"
RIGHT_READS="/mnt/nfs/projects/armbrust-metat/gradients2/g2_dcm_rr_pa_metat/paired_end/${SAMPLE}.2.paired.trim.fastq.gz"

#run kallisto using the index, sample and short reads (writing out a log)
echo "Running kallisto on ${SAMPLE} against nucleotideClusterSequences.fasta"
kallisto quant --rf-stranded -i /scratch/elaina/g2Inc/NPac.G2PA.bf100.id99.nt.idx -o ${SAMPLE} <(zcat ${LEFT_READS}) <(zcat ${RIGHT_READS}) >> ${SAMPLE}.kallisto.log

#rename the output to something project and sample specific:
mv ${SAMPLE}/abundance.tsv /scratch/elaina/g2Inc/mapped/${SAMPLE}.abundance.tsv
#rename run_info.json to something project and sample specific:
mv ${SAMPLE}/run_info.json /scratch/elaina/g2Inc/mapped/${SAMPLE}.run_info.json
}

#align short reads against the kallisto index of assembled contigs
#concatenated across samples
egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited); do
echo $SAMPLE
time run_kallisto
done

#after finishing 102, I canceled this run

egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited_2); do
> echo $SAMPLE
> time run_kallisto
> done

egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited_3); do
> echo $SAMPLE
> time run_kallisto
> done

egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited_4); do
> echo $SAMPLE
> time run_kallisto
> done

egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited_5); do
> echo $SAMPLE
> time run_kallisto
> done

egthomas@grazer:/scratch/elaina/g2Inc$ for SAMPLE in $(cat ~/g2Incubations/samplesEdited_6); do
> echo $SAMPLE
> time run_kallisto
> done

#for each metaT mapping abundance file, adds name of file as a variable
#https://stackoverflow.com/questions/59406104/how-to-add-column-in-file-txt-based-on-filename
egthomas@grazer:/scratch/elaina/g2Inc/mapped$ for file in *abundance.tsv; do awk 'NR == 1 {print $0 "|name_file"; next;}{print $0 "|" FILENAME;}' $file > ${file}_modified.tsv; done

egthomas@grazer:/scratch/elaina/g2Inc/mapped$ for file in *_modified.tsv; do grep -v $'\t0\t' $file > ${file}_filtered.tsv; done

#concatenate all of the g2 dcm polyA metaT mapping abundance files
egthomas@grazer:/scratch/elaina/g2Inc/mapped$ for file in *tsv_filtered.tsv; do (cat "${file}"; echo) >> G2Inc_mappedReadAbundance.tsv; done

 R

#read in the concatenated g2 incubation polyA metaT mapping abundance file
> dat <- read_tsv("G2Inc_mappedReadAbundance.tsv")

#fix sample name variable
> dat <- dat %>% mutate(sample = str_extract(`tpm|name_file`, "\\|.*"))
> dat <- dat %>% mutate(sample = str_replace(sample, "\\|", ""))

#loads best taxa annotation for each g2 surface contig
> tax_best <- read_csv("~/g2/NPac.G2PA.MarFERReT_MarMicroDB.lca_bestAnnotation_fall2023.csv")

> tax_best %>% nrow()
[1] 26043159
> tax_best %>% distinct(nt_id) %>% nrow()
[1] 26043159

#add taxa annotations of contigs to the number of reads mapped to contig per sample
> nrow(dat)
[1] 234281792
> dat_tax <- dat %>% left_join(tax_best, by = c("target_id" = "nt_id"))
> nrow(dat_tax)
[1] 234281792

#get rid of contigs without taxa annotations
> dat_tax_noNA <- dat_tax %>% filter(!is.na(V2))

> dat_tax_noNA %>% write_csv("/scratch/elaina/g2Inc/g2Inc_mappedReadAbundance_noZeroes.csv")

#loads best pfam annotation for each g2 surface contig reading frame
> pfam <- read_csv("~/g2DCM/G2_surface/G2_surface_pfamAnnotations_bestPfam.tab")

#make variable for the nucleotide id 
> pfam <- pfam %>% mutate(nt_id = str_replace(V1, "_[0-9]{1,}$", ""))

#more than one pfam annotation per nucleotide id
> pfam %>% nrow()
[1] 15241470
> pfam %>% distinct(nt_id) %>% nrow()
[1] 15124459

#so for each cluster representative contig, get the pfam with the highest score
> pfam <- pfam %>% group_by(nt_id) %>% slice(which.max(V8))

> nrow(pfam)
[1] 15124459

#adds best pfam annotation to each nucleotide id in counts dataframe
> nrow(dat_tax_noNA)
[1] 140625859
> dat_tax_noNA_merged <- dat_tax_noNA %>% left_join(pfam %>% select(V4, V5, nt_id), by = c("target_id" = "nt_id"))
> nrow(dat_tax_noNA_merged)
[1] 140625859

#write data with number of mapped reads per contig per sample, with the contig's 
#pfam and taxa annotation to csv file
> dat_tax_noNA_merged %>% write_csv("/scratch/elaina/g2Inc/g2Inc_taxa_pfams.csv")

##calculate transcripts per million
> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% mutate(length_kb = length/1000)

> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% mutate(est_counts_div_length_kb = est_counts/length_kb)

> mCounts <- dat_tax_noNA_merged %>% group_by(sample, V2) %>% summarize(mCount = sum(est_counts_div_length_kb)/1e6)
`summarise()` has grouped output by 'sample'. You can override using the `.groups` argument.

> mCounts <- mCounts %>% ungroup()

> nrow(dat_tax_noNA_merged)
[1] 140625859
> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% left_join(mCounts, by = c("sample", "V2"))
> nrow(dat_tax_noNA_merged)
[1] 140625859

> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% mutate(tpm = est_counts_div_length_kb/mCount)

> dat_tax_noNA_merged %>% write_csv("/scratch/elaina/g2Inc/g2Inc_taxa_pfams_tpm.csv")

#after calculating tpm, get rid of contigs without pfam annotations
> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% filter(!is.na(V5))

> dat_tax_noNA_merged %>% write_csv("/scratch/elaina/g2Inc/g2Inc_taxa_pfams_tpm_noNAPfam.csv")

#loads feature pfams
> pfam <- read_csv("~/Extracted_Pfams_noOutliers_newContaminationMetric_xg.csv")

#make pfam variable without digits after decimal
> dat_tax_noNA_merged <- dat_tax_noNA_merged %>% mutate(pfam = str_replace(V5, "\\..*", ""))

#load taxa names associated with each taxa id in marferret
> name <- read_csv("/mnt/nfs/projects/marferret/v1/data/MarFERReT.v1.taxa.csv")

#get rid of unnecessary variables
> name <- name %>% select(1:4)

#name taxa id variable
> colnames(dat_tax_noNA_merged)[8] <- "tax_id"

#add taxa names to counts data
> nrow(dat_tax_noNA_merged)
[1] 62358245
dat_tax_noNA_merged_name <- dat_tax_noNA_merged %>% left_join(name, by = c("tax_id"))
> nrow(dat_tax_noNA_merged_name)
[1] 62358245

#get rid of contigs without taxa names
> dat_tax_noNA_merged_name_noMissingTaxa <- dat_tax_noNA_merged_name %>% filter(!is.na(tax_name))

#load core transcribed genes (CTGS) identified 
#from 10.1038/s41597-023-02842-4
> core <- read_csv("~/MarFERReT.v1.core_genes.csv")

#get just ctgs grouped at level of eukaryotes
> core <- core %>% filter(lineage == "Eukaryota")

#make a dataframe to count the number of ctgs in each species bin by sample
> pfamSummary <- dat_tax_noNA_merged_name_noMissingTaxa %>% semi_join(core, by = c("V5" = "pfam_id"))

#calculate number of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% group_by(sample, tax_id, tax_name) %>% distinct(V5) %>% summarize(numCorePfams = n())
`summarise()` has grouped output by 'sample', 'tax_id'. You can override using the `.groups` argument.

#there are a total of 605 eukaryote ctgs
#calculate proportion of ctgs in each species bin by sample
> pfamSummary <- pfamSummary %>% ungroup() %>% mutate(propCorePfams = numCorePfams/605)

> pfamSummary %>% write_csv("/scratch/elaina/g2Inc/pfamSummary.csv")

#get species bins/samples that have at least 70% of ctgs detected
> pfamSummary <- pfamSummary %>% filter(propCorePfams >= .7)

#gets just the counts for taxa and sample pairs that have at least 70% ctg coverage
> dat_tax_noNA_merged_name_noMissingTaxa <- dat_tax_noNA_merged_name_noMissingTaxa %>% semi_join(pfamSummary, by = c("tax_id", "sample"))

#for each taxa, sample, and pfam combination, get the total tpm
> g2Inc_summary <- dat_tax_noNA_merged_name_noMissingTaxa %>% ungroup() %>% dplyr::group_by(sample, tax_id, tax_name, V5) %>% dplyr::summarize(tpm = sum(tpm))
`summarise()` has grouped output by 'sample', 'tax_id', 'tax_name'. You can override using the `.groups` argument.

#ungroup counts summary data
> g2Inc_summary <- g2Inc_summary %>% ungroup()

#rename pfam variable
> colnames(g2Inc_summary)[4] <- "pfam"

#make pfam variable without digits after decimal
> g2Inc_summary <- g2Inc_summary %>% mutate(shortPfam = str_replace(pfam, "\\..{1,}$", ""))

#gets rid of unnecessary variables
> g2Inc_summary_spread <- g2Inc_summary %>% select(sample, tax_name, shortPfam, tpm)

#spread data, filling in missing pfams with tpm 0
> g2Inc_summary_spread <- g2Inc_summary_spread %>% spread(key = shortPfam, value = tpm, fill = 0)

#load feature pfams
> pfam <- read_csv("~/Extracted_Pfams_noOutliers_newContaminationMetric_xg.csv")

> merg <- g2Inc_summary_spread

> dim(merg)

#gather counts data into long form
> merg <- merg %>% gather(3:6150, key = "pfam", value = "tpm")

#get feature pfams missing from counts data
> miss <- pfam %>% anti_join(merg, by = c("pfam"))

#add these missing feature pfams to counts dataand give them tpm of 0
> miss <- miss %>% mutate(sample = "G2PA.MS01.abundance.tsv", tax_name = "Bathycoccus")

> merg <- merg %>% bind_rows(miss)

#spread data, filling in missing pfams with tpm 0
> merg <- merg %>% spread(key = pfam, value = tpm, fill = 0)

> merg %>% write_csv("/scratch/elaina/g2Inc/g2Inc_tpm_updatedMarferret_marmicroDb2023_sampleTaxa_noOutliers_fixedTPM_fall2023_allPfams.csv")

#gather into long form
> merg <- merg %>% gather(3:6152, key = "pfam", value = "TPM")

#get just the counts data for the feature pfams
> merg <- merg %>% semi_join(pfam, by = c("pfam"))

#spread data
> merg <- merg %>% spread(key = pfam, value = TPM, fill = 0)

#get just taxa name with spaces, ie the species because only 
#species bins are desired
> merg <- merg %>% filter(str_detect(tax_name, " "))

> merg %>% select(sample:tax_name) %>% write_csv("/scratch/elaina/g2Inc/g2Inc_tpm_updatedMarferret_marmicroDb2023_sampleTaxa_noOutliers_fixedTPM_fall2023.csv")
> merg %>% select(-c(sample:tax_name)) %>% write_csv("/scratch/elaina/g2Inc/g2Inc_tpm_updatedMarferret_marmicroDb2023_noOutliers_fixedTPM_fall2023.csv")

##moved G2Inc_mappedReadAbundance.tsv from scratch to /mnt/nfs/projects/armbrust-metat/gradients2/g2_dcm_rr_pa_metat/kallisto/








